# Axium Prefix Configuration
#
# This file defines command prefix rules that Axium applies based on context.
# When you run a command like `aws s3 ls`, Axium transparently expands it
# to `enva-root aws s3 ls` (if env is set to "root").
#
# Template variables:
#   ${env.<key>}  - Environment properties from envs.yaml
#                   (e.g., ${env.prefix}, ${env.region}, ${env.aws_profile})
#   ${tmux_pane}  - Current tmux pane ID
#
# Copy this file to: ~/.config/axium/prefixes.yaml

prefixes:
  # AWS CLI - prefix based on current environment
  - command: aws
    prefix: ${env.prefix}

  # Terraform - prefix based on current environment
  - command: terraform
    prefix: ${env.prefix}

  # Ansible playbook - prefix based on current environment
  - command: ansible-playbook
    prefix: ${env.prefix}

  # Kubectl - prefix based on current environment
  - command: kubectl
    prefix: ${env.prefix}

  # Docker - prefix based on current environment (if needed)
  # - command: docker
  #   prefix: ${env.prefix}

# Usage:
#
# 1. Set up your environment-specific prefix functions (e.g., enva-root, enva-builder)
#    These are typically defined in your company's shell configuration.
#
# 2. Set the current environment:
#    $ ax env root
#
# 3. Run commands normally - Axium handles prefixing automatically:
#    $ aws s3 ls
#    # Actually executes: enva-root aws s3 ls
#
# 4. Switch environments:
#    $ ax env builder
#    $ aws s3 ls
#    # Now executes: enva-builder aws s3 ls
#
# The prefixing is completely transparent - you just type the command,
# Axium applies the environment context automatically.
